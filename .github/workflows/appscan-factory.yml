name: Appscan Factory

on:
    # Scan changed files in PRs (diff-aware scanning):
    pull_request: {}
    # Scan on-demand through GitHub Actions interface:
    workflow_dispatch: {}
    # Scan mainline branches and report all findings:
    push:
        branches: ["master", "main"]
    schedule:
        - cron: "0 0 */5 * *"
jobs:
    SAST:
        name: SAST - semgrep-oss
        # If you are self-hosting, change the following `runs-on` value:
        runs-on: ubuntu-latest

        container:
            # A Docker image with Semgrep installed. Do not change this.
            # image: semgrep/semgrep
            # A custom Docker image with Semgrep installed.
            image: ahddry/semgrep-custom:latest

        # Skip any PR created by dependabot to avoid permission issues:
        if: (github.actor != 'dependabot[bot]')

        steps:
            # Fetch project source with GitHub Actions Checkout. Use either v3 or v4.
            - name: Checkout code
              uses: actions/checkout@v4
            - name: Verify installed tools
              run: |
                  semgrep --version
                  visu-semgrep-ci -t
            - name: Install parser's dependencies
              run: |
                  pip install -r requirements.txt
            - name: ignore specific files
              run: |
                  echo ".*" > ".semgrepignore"
                  ls -al
            - name: Run Semgrep
              run: semgrep-custom . .
            - name: Parse results and upload to database
              env:
                  PROJECT_ID: ${{ secrets.PROJECT_ID }}
                  MONGODB_URL: ${{ secrets.MONGODB_URL }}
                  MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
                  MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
              run: python visu-parser.py semgrep-report.json
            - name: Upload semgrep artifact
              uses: actions/upload-artifact@v4
              with:
                  name: semgrep-results
                  path: semgrep-report.json
            - name: Upload report summary
              uses: actions/upload-artifact@v4
              with:
                  name: report-summary
                  path: semgrep-results-summary.txt
            - name: Upload parsed report
              uses: actions/upload-artifact@v4
              with:
                  name: parsed-report
                  path: parsed_file.json
    SBOM:
        name: SBOM - CycloneDX
        runs-on: ubuntu-latest
        if: (github.actor != 'dependabot[bot]')

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
            - name: Set up Node.js
              uses: actions/setup-node@v4
            - name: Install cdgen
              run: npm install -g @cyclonedx/cdxgen
            - name: Generate CycloneDX SBOM
              run: cdxgen -o cdxgen-sbom.json
            - name: Upload CycloneDX SBOM
              uses: actions/upload-artifact@v4
              with:
                  name: cdxgen-sbom
                  path: cdxgen-sbom.json

    SCA:
        name: SCA - Depscan
        runs-on: ubuntu-latest
        needs: SBOM
        if: (github.actor != 'dependabot[bot]')

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
            - name: Install depscan
              run: |
                  curl -Lo depscan https://github.com/AppThreat/depscan/releases/latest/download/depscan
                  chmod +x depscan
            - name: Verify installed tools
              run: ./depscan --version
            - name: Run depscan
              run: ./depscan --bom cdxgen-sbom.json --reports-dir .
            - name: Upload SCA report
              uses: actions/upload-artifact@v4
              with:
                  name: depscan-report
                  path: depscan-bom.json

            # - name: Verify installed tools
            #   run: depscan --version
            # - name: Run CycloneDx
            #   run: cdxgen -o cdxgen-sbom.json
            # - name: Run depscan
            #   run: depscan --bom cdxgen-sbom.json --reports-dir .
            # - name: Upload CycloneDx SBOM
            #   uses: actions/upload-artifact@v4
            #   with:
            #       name: cdxgen-sbom
            #       path: cdxgen-sbom.json
            # - name: Upload depscan report
            #   uses: actions/upload-artifact@v4
            #   with:
            #       name: depscan-report
            #       path: depscan-bom.json
